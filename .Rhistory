#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exists==0){
print("FAIL")
}
}
find_word(m)
find_word(m)
find_word(m)
find_word(m)
exist<-0
if (exists==0){
print("FAIL")
}
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exist==0){
print("FAIL")
}
}
find_word(m)
find_word(m)
remove(exists)
read.csv("C:/Users/Kiko Sánchez/Desktop/Ubiqum/Course 2/00. Resources and testing area/Testing with dplyr/sampledata.csv")
dplyr3<-read.csv("C:/Users/Kiko Sánchez/Desktop/Ubiqum/Course 2/00. Resources and testing area/Testing with dplyr/sampledata.csv")
library(dplyr)
sample_n(dplyr3, 3)
#Selecting Random Fraction of Rows
sample_frac(dplyr3, 0.1)
#The distinct function is used to eliminate duplicates.
x1 = distinct(dplyr3)
#Remove Duplicate Rows based on a variable
x2 = distinct(dplyr3, Index, .keep_all = TRUE)
View(x2)
#Remove Duplicate Rows based on a variable (Index)
x2 = distinct(dplyr3, Index, .keep_all = TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(mydata, Index, Y2010, .keep_all= TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(dplyr3, Index, Y2010, .keep_all= TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(dplyr3, Index, Y2010, .keep_all= TRUE)
#Selecting Variables (or Columns)
mydata2 = select(dplyr3, Index, State:Y2008)
View(mydata2)
View(dplyr3)
#The minus sign before a variable tells R to drop the variable.
mydata = select(dplyr3, -Index, -State)
View(mydata)
#The above code can also be written like :
mydata = select(dplyr3 c-(Index, State))
#The above code can also be written like :
mydata = select(dplyr3, -c(Index, State))
#The starts_with() function is used to select variables starts with an alphabet.
mydata3 = select(dplyr3, starts_with("Y"))
View(mydata3)
View(mydata3)
#Adding a negative sign before starts_with() implies dropping the variables starts with 'Y'
mydata4 = select(dplyr3, -starts_with("Y"))
View(mydata4)
#Selecting Variables contain 'I' in their names.
mydata5 = select(dplyr3, contains("I"))
View(mydata5)
#The code below keeps variable 'State' in the front and the remaining variables follow that.
mydata5 = select(dplyr3, State, everything())
View(mydata5)
View(mydata5)
#renaming 'Index' variable to 'Index1'.
mydata6 = rename(dplyr3, Index1=Index)
View(mydata6)
#to filter rows and retain only those values in which Index is equal to A.
mydata7 = filter(dplyr3, Index=="A")
View(mydata7)
#The %in% operator can be used to select multiple items
mydata8= filter(dplyr3, Index %in% c("A","C"))
View(mydata8)
#In this case, we are picking data for 'A' and 'C' in the column
#'Index' and income greater than 1.3 million in Year 2002.
mydata9 = filter(dplyr3, Index %in% c("A", "C" & Y2002>=1300000))
#In this case, we are picking data for 'A' and 'C' in the column
#'Index' and income greater than 1.3 million in Year 2002.
mydata9 = filter(dplyr3, Index %in% c("A", "C") & Y2002>=1300000)
#The '|' denotes OR in the logical condition. It means any of the two conditions.
mydata10 = filter(dplyr3, Index %in% c("A","C") | Y2002>=1300000)
#The "!" sign is used to reverse the logical condition
mydata11 = filter(dplyr3, !Index %in% c("A", "C") | Y2002>=13000000)
View(mydata11)
#The grepl function is used to search for pattern matching. In the following code,
#we are looking for records wherein column state contains 'Ar' in their name.
mydata12 = filter(dplyr3, grepl("Ar", State))
View(mydata12)
#Summarize selected variables. Calculating mean and median for the variable Y2015.
summarise(dplyr3, Y2015_mean = mean(Y2015),
Y2015_med=median(Y2015))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), funs(n(), mean, median))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), list(n(), mean, median))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), list(mean, median))
summarise_at(mydata, vars(Y2011, Y2012),
list(missing = sum(is.na(.)), mean(., na.rm = TRUE), median(.,na.rm = TRUE)))
#Summarize all Numeric Variables
summarise_if(dplyr3, is.numeric,
list(mean,median))
install.packages("githubinstall")
githubinstall::githubinstall("taucharts")
install.packages("taucharts")
githubinstall::githubinstall("taucharts")
library(pkgbuild)
install.packages("pkgbuild")
githubinstall::githubinstall("taucharts")
install.packages("pkgload")
githubinstall::githubinstall("taucharts")
githubinstall::githubinstall("taucharts")
githubinstall::githubinstall("taucharts")
githubinstall::githubinstall("taucharts")
githubinstall::githubinstall("taucharts")
# Loading libraries ####
library(downloader) # to get the data
library(dplyr)
# Reading data ####
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("msleep_ggplot2.csv", stringsAsFactors = FALSE)
msleep %>% select(name, starts_with("sl"))
msleep_new <- msleep %>%
group_by(vore) %>%
summarise(mean_sleep = mean(sleep_total))
msleep_new <- msleep %>%
filter(sleep_total>2 & sleep_total<19) %>%
group_by(vore) %>%
summarise(mean_sleep = mean(sleep_total))
msleep_new <- msleep %>%
filter(sleep_total>2 & sleep_total<19, !conservation %in% "domesticated") %>%
group_by(vore) %>%
summarise(mean_sleep = mean(sleep_total))
msleep_new <- msleep %>%
na.omit() %>%
filter(sleep_total>2 & sleep_total<19, !conservation!="domesticated") %>%
group_by(vore) %>%
summarise(mean_sleep = mean(sleep_total))
msleep <- msleep %>% mutate(bra_bo_ratio = brainwt*100/bodywt)
msleep <- msleep %>%
mutate(animal_count = row_number())
View(msleep)
library(ggplot2)
library(ggplot2)
nmmaps <- read.csv("../Course 3. IoT analytics/Task0.Testing_dplyr_lubridate/chicago-nmmaps.csv")
nmmaps&date <- as.Date(nmmaps$date)
nmmaps$date <- as.Date(nmmaps$date)
nmmaps <- nmmaps [nmmaps$date > as.Date("1996-12-31"),]
nmmaps$year <- substring(nmmaps$date, 1, 4)
head(nmmaps)
ggplot(nmmaps,
aes(date, temp))+
geom_point(color="firecrick")
ggplot(nmmaps,
aes(date, temp))+
geom_point(color="firebrick")
g <- ggplot(nmmaps,
aes(date, temp))+
geom_point(color="firebrick")
g + ggtitle("Temperature")
g + theme(plot.title = element_text(size = 20, face = "bold",
margin = 10, 0, 10, 0))
g + theme(plot.title = element_text(size = 20, face = "bold",
margin = 10, 0, 10, 0)))
g + ggtitle("Temperature")
g <- g + ggtitle("Temperature")
g + theme(plot.title = element_text(size = 20, face = "bold",
margin = 10, 0, 10, 0))
g <- ggplot(nmmaps,
aes(date, temp))+
geom_point(color="firebrick")
g + theme(plot.title = element_text(size = 20, face = "bold",
margin = 10, 0, 10, 0))
g+theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0)))
g
g1 <- g+theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0)))
g1
g1 <- g+theme(plot.title = element_text(size=20, face="bold", margin = margin(10, 0, 10, 0)))
g1
g1 <- g+theme(plot.title = element_text(size=10, face="bold", margin = margin(10, 0, 10, 0)))
View(nmmaps)
g <- ggplot(nmmaps,
aes(date, temp))+
geom_point(color="firebrick")
g <- g + ggtitle("Temperature")
g <- g + ggtitle("Temperature")
remove(g)
remove(g1)
g <- ggplot(nmmaps,
aes(date, temp))+
geom_point(color="firebrick")
g + ggtitle("Temperature")
g + ggtitle("Temperature") +
theme(plot.title = element_text(size = 20, face = "bold",
margin = 10, 0, 10, 0))
g + ggtitle("Temperature"),
theme(plot.title = element_text(size = 20, face = "bold",
margin = 10, 0, 10, 0))
g + ggtitle("Temperature")
g <- g+labs(x="Date", y=expression(paste("Temperature ( ", degree ~ F, " )")), title="Temperature")
g
ggplot(nmmaps, aes(date, temp))+
geom_point(color="grey")+
labs(x="Month", y="Temp")+
scale_y_continuous(label=function(x){return(paste("My value is", x, "degrees"))})
#### 00. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi,dplyr,tidyr,ggplot2,caret,rpart,gdata,chron,lubridate,padr)
# Setwd (1º current wd where is the script, then we move back to the
# general folder)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
#load data frame
load("../Task1.IoT_Exploratory_data_analysis/datasets/entire_ok.Rda")
plot(entire_ok$Sub_metering_1)
## Subset the second week of 2008 - All Observations
houseWeek <- filter(yourData, year == 2008 & week == 2)
## Subset the second week of 2008 - All Observations
houseWeek <- filter(entire_ok, year == 2008 & week == 2)
View(entire_ok)
## Plot subset houseWeek
plot(houseWeek$Sub_metering_1)
View(houseWeek)
## Subset the 9th day of January 2008 - All observations
houseDay <- filter(entire_ok, year == 2008 & month == 1 & day == 9)
View(houseDay)
## Plot sub-meter 1 subset:houseday (9th January 2008)
plot_ly(houseDay,
x = ~houseDay$DateTime, y = ~houseDay$Sub_metering_1,
type = 'scatter',
mode = 'lines')
## Plot sub-meter 1 subset:houseday (9th January 2008)
plot_ly(houseDay,
x = ~houseDay$DateTime, y = ~houseDay$Sub_metering_1,
type = 'scatter',
mode = 'lines')
#### 00. INCLUDES ####
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi,dplyr,tidyr,ggplot2,plotly,caret,rpart,gdata,chron,lubridate,padr)
## Plot sub-meter 1 subset:houseday (9th January 2008)
plot_ly(houseDay,
x = ~houseDay$DateTime, y = ~houseDay$Sub_metering_1,
type = 'scatter',
mode = 'lines')
## Plot sub-meter 1, 2 and 3 with title, legend and labels - All observations
plot_ly(houseDay, x = ~houseDay$DateTime, y = ~houseDay$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseDay$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseDay$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (kW-hours)"))
test <- houseDay %>% dplyr::group_by(hour)%>%
test <- houseDay %>% dplyr::group_by(hour)%>%
dplyr::summarise(consumption = sum(Global_active_power))
library(dplyr)
test <- houseDay %>% dplyr::group_by(hour)%>%
dplyr::summarise(consumption = sum(Global_active_power))
View(test)
ggplot(test, aes(hour, consumption))+
geom_line()
test <- houseDay %>% dplyr::group_by(hour)%>%
dplyr::summarise(consumption = sum(Global_active_power),
sub1 = sum(Sub_Metering_1))
test <- houseDay %>% dplyr::group_by(hour)%>%
dplyr::summarise(consumption = sum(Global_active_power),
sub1 = sum(Sub_metering_1))
ggplot(test, aes(hour, consumption))+
geom_line()+
geom_line(aes(y=sub1))
## Plot sub-meter 1, 2 and 3 with title, legend and labels - All observations
plot_ly(houseDay, x = ~houseDay$DateTime, y = ~houseDay$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseDay$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseDay$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (kW-hours)"))
## Subset the 9th day of January 2008 - 10 Minute frequency
houseDay10 <- filter(entire_ok, year == 2008 & month == 1 & day == 9 &
(minute == 0 | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
View(houseDay10)
View(houseDay10)
## Plot sub-meter 1, 2 and 3 with title, legend and labels - 10 Minute frequency
plot_ly(houseDay10, x = ~houseDay10$DateTime, y = ~houseDay10$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseDay10$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseDay10$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
# Subset the 'Blue Monday' week of 2009
blue_week <- filter(entire_ok, year == 2009 & month == 1 & week == 4)
View(blue_week)
View(blue_week)
# Subset the 'Blue Monday' week of 2009
blue_week <- filter(entire_ok, year == 2009 & month == 1 & week == 4 & minute == 0)
View(blue_week)
## Plot sub-meter 1, 2 and 3 with title, legend and labels - 10 Minute frequency
plot_ly(blu, x = blue_week$DateTime, y = blue_week$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = blue_week$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = blue_week$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption January 9th, 2008",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
## Plot sub-meter 1, 2 and 3 with title, legend and labels - 10 Minute frequency
plot_ly(blu, x = blue_week$DateTime, y = blue_week$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = blue_week$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = blue_week$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Blue Week, 2009",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (kW-hours)"))
## Plot sub-meter 1, 2 and 3 with title, legend and labels - 10 Minute frequency
plot_ly(blue_week, x = blue_week$DateTime, y = blue_week$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = blue_week$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = blue_week$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Blue Week, 2009",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (kW-hours)"))
View(entire_ok)
# Subset the 'Yellow week' of 2009 - 1 hour frequency (only o'clock hours)
yellow_week <- filter(entire_ok, year == 2009 & month == 6 & week == 4 & minute == 0)
## Plot sub-meter 1, 2 and 3 with title, legend and labels - 10 Minute frequency
plot_ly(yellow_week, x = yellow_week$DateTime, y = yellow_week$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = yellow_week$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = yellow_week$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Yellow Week, 2009",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (kW-hours)"))
## Plot sub-meter 1, 2 and 3 with title, legend and labels - 10 Minute frequency
plot_ly(yellow_week, x = yellow_week$DateTime, y = yellow_week$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = yellow_week$Sub_metering_2, name = 'Laundry Room', mode = 'bar') %>%
add_trace(y = yellow_week$Sub_metering_3, name = 'Water Heater & AC', mode = 'bar') %>%
layout(title = "Power Yellow Week, 2009",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (kW-hours)"))
## Plot sub-meter 1, 2 and 3 with title, legend and labels - 10 Minute frequency
plot_ly(yellow_week, x = yellow_week$DateTime, y = yellow_week$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'bar') %>%
add_trace(y = yellow_week$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = yellow_week$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Yellow Week, 2009",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (kW-hours)"))
# Subset the 'Yellow week' of 2009 - 1 hour frequency (only o'clock hours)
yellow_week <- filter(entire_ok, year == 2009 & month == 6 & week == 4 & minute == 0)
# Subset the 'Yellow week' of 2009 - 1 hour frequency (only o'clock hours)
yellow_week <- filter(entire_ok, year == 2009 & month == 6 & week == 3 & minute == 0)
# Subset the 'Yellow week' of 2009 - 1 hour frequency (only o'clock hours)
yellow_week <- filter(entire_ok, year == 2009 & week == 25 & minute == 0)
## Plot sub-meter 1, 2 and 3 with title, legend and labels - 10 Minute frequency
plot_ly(yellow_week, x = yellow_week$DateTime, y = yellow_week$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = yellow_week$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = yellow_week$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Yellow Week, 2009",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (kW-hours)"))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, year == 2007, 2008)
entire_ok, year == 2007 & month == 12)
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, year == 2007 & month == 12) #, 2008 & (month == 0 | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50) )
View(winter_0708)
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) &
(year == 2008 & (month == 1 | month == 2 | month == 3)))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) & (year == 2008 & (month == 1 | month == 2 | month == 3)))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) & (year == 2008 & (month == 1 | month == 2 | month == 3))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) & (year == 2008 & (month == 1 & month == 2 & month == 3)))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) #& (year == 2008 & (month == 1 & month == 2 & month == 3)))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12)) #& (year == 2008 & (month == 1 & month == 2 & month == 3)))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, year == 2007 & month == 12) #& (year == 2008 & (month == 1 & month == 2 & month == 3)))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, year == 2007 & month == 12) & (year == 2008 & (month == 1 & month == 2 & month == 3))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, year == 2007 & month == 12) %>%
filter(year == 2008 & (month == 1 & month == 2 & month == 3))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, year == 2007 & month == 12) #%>%
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) & year == 2008) #%>%
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) | year == 2008) #%>%
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) | (year == 2008 & month == 1 & month == 2 & month == 3)) #%>%
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) | (year == 2008 & month == 1))# & month == 2 & month == 3)) #%>%
View(winter_0708)
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) |
(year == 2008 & month == 1))# & month == 2 & month == 3)) #%>%
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) |
(year == 2008 & month == 1) | (year == 2008 & month == 2))
# Subset Winter period 2007 - 2008
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) |
(year == 2008 & month == 1) |
(year == 2008 & month == 2) |
(year == 2008 & month == 3))
summer_08 <- filter(entire_ok, year == 2008 & month == 6 | month == 7 | month == 8 | month == 9)
summer_08 <- filter(entire_ok, year == 2008 & month == 6) |
(year == 2008 & month == 7) |
(year == 2008 & month == 8) |
(year == 2008 & month == 9)
summer_08 <- filter(entire_ok, year == 2008 & month == 6) |
(year == 2008 & month == 7) |
(year == 2008 & month == 8) |
(year == 2008 & month == 9))
summer_08 <- filter(entire_ok, (year == 2008 & month == 6) |
(year == 2008 & month == 7) |
(year == 2008 & month == 8) |
(year == 2008 & month == 9))
View(yellow_week)
View(winter_0708)
# Subset Winter period 2007 - 2008 (december 2007 - march 2008) - 1 hour frequency
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12 & minute == 0) |
(year == 2008 & month == 1 & minute == 0) |
(year == 2008 & month == 2 & minute == 0) |
(year == 2008 & month == 3 & minute == 0))
# Subset Summer period 2008 (june - september) - 1 hour frequency
summer_08 <- filter(entire_ok, (year == 2008 & month == 6 & minute == 0) |
(year == 2008 & month == 7 & minute == 0) |
(year == 2008 & month == 8 & minute == 0) |
(year == 2008 & month == 9 & minute == 0))
## Plot sub-meter 1, 2 and 3 with title, legend and labels - winter 07-08 - 1 hour frequency
plot_ly(winter_0708, x = winter_0708$DateTime, y = winter_0708$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = winter_0708$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = winter_0708$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Winter, 2007-08",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (kW-hours)"))
View(entire_ok)
# Subset Winter period 2007 - 2008 (december 2007 - march 2008) - 1 hour frequency
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) |
(year == 2008 & month == 1) |
(year == 2008 & month == 2) |
(year == 2008 & month == 3)&
(hour_minute == "0S"))# | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
(hour_minute == starts_with("0S"))# | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
# Subset Winter period 2007 - 2008 (december 2007 - march 2008) - 1 hour frequency
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) |
(year == 2008 & month == 1) |
(year == 2008 & month == 2) |
(year == 2008 & month == 3) &
(hour_minute == starts_with("0S")))# | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
# Subset Winter period 2007 - 2008 (december 2007 - march 2008) - 1 hour frequency
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) |
(year == 2008 & month == 1) |
(year == 2008 & month == 2) |
(year == 2008 & month == 3)&
(hour_minute == "0S"))# | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
View(winter_0708)
# Subset Winter period 2007 - 2008 (december 2007 - march 2008) - 1 hour frequency
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) |
(year == 2008 & month == 1) |
(year == 2008 & month == 2) |
(year == 2008 & month == 3)&
(hour_minute == "1H 12M 0S"))# | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
View(winter_0708)
# Subset Winter period 2007 - 2008 (december 2007 - march 2008) - 1 hour frequency
winter_0708 <- filter(entire_ok, (year == 2007 & month == 12) |
(year == 2008 & month == 1) |
(year == 2008 & month == 2) |
(year == 2008 & month == 3)&
(hour == 1))# | minute == 10 | minute == 20 | minute == 30 | minute == 40 | minute == 50))
View(winter_0708)
View(winter_0708)
