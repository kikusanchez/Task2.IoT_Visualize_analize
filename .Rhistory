if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
}
}
find_word(m)
for (i in 1:ncol(m)) {
keyword<-readline(prompt = "Enter your word: ")
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste(i, "TRUE"))
}
}
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
}
}
find_word<- function(data){
for (i in 1:ncol(m)) {
keyword<-readline(prompt = "Enter your word: ")
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste(i, "TRUE"))
}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
}
}
find_word(m)
for (i in 1:ncol(m)) {
keyword<-readline(prompt = "Enter your word: ")
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste(i, "TRUE"))
}
}
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
else (print(paste("FALSE"))
}
}
find_word(m)
find_word<- function(data){
find_word<- function(data){
for (i in 1:ncol(m)) {
keyword<-readline(prompt = "Enter your word: ")
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste("TRUE at the row ",i))
}
else (print(paste("FALSE")){}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
else (print(paste("FALSE")){}
}
}
find_word(m)
find_word<- function(data){
for (i in 1:ncol(m)) {
keyword<-readline(prompt = "Enter your word: ")
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste("TRUE at the row ",i))
}
else (print(paste("FALSE")){}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
else (print(paste("FALSE")){}
}
}
find_word<- function(data){
for (i in 1:ncol(m)) {
keyword<-readline(prompt = "Enter your word: ")
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste("TRUE at the row ",i))
}
else (print(paste("FALSE"))
}
for (y in 1:nrow(m)) {
keyword<-readline(prompt = "Enter your word: ")
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
else (print(paste("FALSE"))
}
}
find_word(m)
library(readr)
a<-c("F","A","C","I")
b<-c("O","B","Q","P")
c<-c("A","N","O","B")
d<-c("M","A","S","S")
m<- matrix(c(a,b,c,d), nrow=4, ncol=4, byrow = TRUE)
comb_cols<-c()
comb_rows<-c()
find_word<- function(data){
find_word<- function(data){
find_word<- function(data){
find_word<- function(data){
find_word<- function(data){
for (i in 1:ncol(m)) {
keyword<-readline(prompt = "Enter your word: ")
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste("TRUE at the row ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
keyword<-readline(prompt = "Enter your word: ")
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
else {print(paste("FALSE"))}
}
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste("TRUE at the row ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
else {print(paste("FALSE"))}
}
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
for (i in 1:ncol(m)) {
exists<-0
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste("TRUE at the row ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE at the row ",y))
}
else {print(paste("FALSE"))}
}
exists<-1
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
print(paste("TRUE in the row ",y))
}
else {print(paste("FALSE"))}
}
}
find_word(m)
find_word(m)
find_word
find_word(m)
exists<-0
exists<-1
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
if (exist==0)
else {print(paste("FALSE"))}
}
}
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
if (exist==0){}
else {print(paste("FALSE"))}
}
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
else {print(paste("FALSE"))}
}
if (exists==0)
print("FAIL")
}
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exists==0)
print("FAIL")
}
find_word(m)
find_word(m)
find_word(m)
ANOB
find_word(m)
find_word(m)
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exists==0){
print("FAIL")
}
}
find_word(m)
find_word(m)
find_word(m)
find_word(m)
exist<-0
if (exists==0){
print("FAIL")
}
find_word<- function(data){
keyword<-readline(prompt = "Enter your word: ")
exist<-0
for (i in 1:ncol(m)) {
comb_cols<-paste(m[,i], collapse = "")
if (grepl(keyword, comb_cols)){
exist<-1
print(paste("TRUE in the column ",i))
}
#else {print(paste("FALSE"))}
}
for (y in 1:nrow(m)) {
comb_rows<-paste(m[y,], collapse = "")
if (grepl(comb_rows, keyword)){
exist<-1
print(paste("TRUE in the row ",y))
}
#else {print(paste("FALSE"))}
}
if (exist==0){
print("FAIL")
}
}
find_word(m)
find_word(m)
remove(exists)
read.csv("C:/Users/Kiko Sánchez/Desktop/Ubiqum/Course 2/00. Resources and testing area/Testing with dplyr/sampledata.csv")
dplyr3<-read.csv("C:/Users/Kiko Sánchez/Desktop/Ubiqum/Course 2/00. Resources and testing area/Testing with dplyr/sampledata.csv")
library(dplyr)
sample_n(dplyr3, 3)
#Selecting Random Fraction of Rows
sample_frac(dplyr3, 0.1)
#The distinct function is used to eliminate duplicates.
x1 = distinct(dplyr3)
#Remove Duplicate Rows based on a variable
x2 = distinct(dplyr3, Index, .keep_all = TRUE)
View(x2)
#Remove Duplicate Rows based on a variable (Index)
x2 = distinct(dplyr3, Index, .keep_all = TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(mydata, Index, Y2010, .keep_all= TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(dplyr3, Index, Y2010, .keep_all= TRUE)
#Remove Duplicates Rows based on multiple variables (Index, Y2010)
x2 = distinct(dplyr3, Index, Y2010, .keep_all= TRUE)
#Selecting Variables (or Columns)
mydata2 = select(dplyr3, Index, State:Y2008)
View(mydata2)
View(dplyr3)
#The minus sign before a variable tells R to drop the variable.
mydata = select(dplyr3, -Index, -State)
View(mydata)
#The above code can also be written like :
mydata = select(dplyr3 c-(Index, State))
#The above code can also be written like :
mydata = select(dplyr3, -c(Index, State))
#The starts_with() function is used to select variables starts with an alphabet.
mydata3 = select(dplyr3, starts_with("Y"))
View(mydata3)
View(mydata3)
#Adding a negative sign before starts_with() implies dropping the variables starts with 'Y'
mydata4 = select(dplyr3, -starts_with("Y"))
View(mydata4)
#Selecting Variables contain 'I' in their names.
mydata5 = select(dplyr3, contains("I"))
View(mydata5)
#The code below keeps variable 'State' in the front and the remaining variables follow that.
mydata5 = select(dplyr3, State, everything())
View(mydata5)
View(mydata5)
#renaming 'Index' variable to 'Index1'.
mydata6 = rename(dplyr3, Index1=Index)
View(mydata6)
#to filter rows and retain only those values in which Index is equal to A.
mydata7 = filter(dplyr3, Index=="A")
View(mydata7)
#The %in% operator can be used to select multiple items
mydata8= filter(dplyr3, Index %in% c("A","C"))
View(mydata8)
#In this case, we are picking data for 'A' and 'C' in the column
#'Index' and income greater than 1.3 million in Year 2002.
mydata9 = filter(dplyr3, Index %in% c("A", "C" & Y2002>=1300000))
#In this case, we are picking data for 'A' and 'C' in the column
#'Index' and income greater than 1.3 million in Year 2002.
mydata9 = filter(dplyr3, Index %in% c("A", "C") & Y2002>=1300000)
#The '|' denotes OR in the logical condition. It means any of the two conditions.
mydata10 = filter(dplyr3, Index %in% c("A","C") | Y2002>=1300000)
#The "!" sign is used to reverse the logical condition
mydata11 = filter(dplyr3, !Index %in% c("A", "C") | Y2002>=13000000)
View(mydata11)
#The grepl function is used to search for pattern matching. In the following code,
#we are looking for records wherein column state contains 'Ar' in their name.
mydata12 = filter(dplyr3, grepl("Ar", State))
View(mydata12)
#Summarize selected variables. Calculating mean and median for the variable Y2015.
summarise(dplyr3, Y2015_mean = mean(Y2015),
Y2015_med=median(Y2015))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), funs(n(), mean, median))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), list(n(), mean, median))
#The summarise_at function allows us to select multiple variables by their names.
#calculating number of records, mean and median for variables Y2005 and Y2006
summarise_at(dplyr3, vars(Y2005, Y2006), list(mean, median))
summarise_at(mydata, vars(Y2011, Y2012),
list(missing = sum(is.na(.)), mean(., na.rm = TRUE), median(.,na.rm = TRUE)))
#Summarize all Numeric Variables
summarise_if(dplyr3, is.numeric,
list(mean,median))
#### 00. INCLUDES -----------------------------------------------------------------------------------
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi,dplyr,tidyr,ggplot2,plotly,caret,rpart,
gdata,chron,lubridate,padr,TTR,opera,GeomComb,fable)
install.packages("pacman")
install.packages("pacman")
install.packages("fable")
#### 00. INCLUDES -----------------------------------------------------------------------------------
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi,dplyr,tidyr,ggplot2,plotly,caret,rpart,
gdata,chron,lubridate,padr,TTR,opera,GeomComb,fable)
install.packages("pacman")
install.packages("fable")
install.packages("fable")
install.packages("padr")
install.packages('pacman', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('fable', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('fable', dependencies=TRUE, repos='http://cran.rstudio.com/')
options(repos='http://cran.rstudio.com/')
install.packages('fable', dependencies=TRUE, repos='http://cran.rstudio.com/')
http_proxy=http://host:port/:
"C:\Program Files\RStudio\bin\rstudio.exe" http_proxy=http://host:port/
http_proxy=http://host:port/:"C:\Program Files\RStudio\bin\rstudio.exe"
http_proxy=http:\\host:port:\"C:\Program Files\RStudio\bin\rstudio.exe"
http_proxy=http://host:port/:"C:\Program Files\RStudio\bin\rstudio.exe"
http_proxy=http:/host:port/:"C:\Program Files\RStudio\bin\rstudio.exe"
http_proxy=http:host:port/:"C:\Program Files\RStudio\bin\rstudio.exe"
http_proxy=host:port/:"C:\Program Files\RStudio\bin\rstudio.exe"
"C:\Program Files\RStudio\bin\rstudio.exe" http_proxy=http://host:port/
install.packages("dplyr")
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("dplyr")
options(repos = c(CRAN = "http://cran.rstudio.com"))
install.packages("dplyr")
options(repos = getOption("repos")["CRAN"])
install.packages("dplyr")
options(repos = c(CRAN = "http://cran.rstudio.com/src/contrib"))
install.packages("dplyr")
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("dplyr")
options(repos = c(CRAN = "http://cran.irsn.fr/"))
install.packages("dplyr")
options(repos = getOption("repos")["CRAN"])
install.packages("dplyr")
#### 00. INCLUDES ---------------------------------------------------------------------
#Load Libraries: p_load can install, load,  and update packages
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
pacman::p_load(rstudioapi,dplyr,tidyr,ggplot2,plotly,caret,rpart,
gdata,chron,lubridate,padr,TTR,forecast,opera,GeomComb,zoo,imputeTS)
# Setwd (1º current wd where is the script, then we move back to the
# general folder)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
#load data frame
load("../Task1.IoT_Exploratory_data_analysis/datasets/entire_ok.Rda")
# Searching for NA's -> 363560
sum(is.na(entire_ok))
plotNA.distribution(entire_ok)
# Granularity -> day (for each month and year) & total power
daily_power <- entire_ok %>%
group_by(year, month, day) %>%
summarise(day_total = sum(Global_active_power))
ts_daily <- ts(daily_power$day_total, frequency = 365, start=c(2007,1))
plotNA.distribution(ts_daily)
plotNA.distributionBar(ts_daily)
plotNA.gapsize(ts_daily)
plotNA.imputations(ts_daily)
plotNA.distribution(ts_daily)
